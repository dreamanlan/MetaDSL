
// SlkExecute.txt - generated by the SLK parser generator 

private:
void    markSeparator ( void );
void    endStatement ( void );
void    pushId ( void );
void    buildOperator ( void );
void    buildFirstTernaryOperator ( void );
void    buildSecondTernaryOperator ( void );
void    beginStatement ( void );
void    addFunction ( void );
void    setFunctionId ( void );
void    buildNullableOperator ( void );
void    markParenthesisParam ( void );
void    markParenthesisParamEnd ( void );
void    buildHighOrderFunction ( void );
void    markBracketParam ( void );
void    markBracketParamEnd ( void );
void    markStatement ( void );
void    markStatementEnd ( void );
void    markExternScript ( void );
void    setExternScript ( void );
void    markBracketColonParam ( void );
void    markBracketColonParamEnd ( void );
void    markParenthesisColonParam ( void );
void    markParenthesisColonParamEnd ( void );
void    markAngleBracketColonParam ( void );
void    markAngleBracketColonParamEnd ( void );
void    markBracePercentParam ( void );
void    markBracePercentParamEnd ( void );
void    markBracketPercentParam ( void );
void    markBracketPercentParamEnd ( void );
void    markParenthesisPercentParam ( void );
void    markParenthesisPercentParamEnd ( void );
void    markAngleBracketPercentParam ( void );
void    markAngleBracketPercentParamEnd ( void );
void    markColonColonParam ( void );
void    markPeriodParam ( void );
void    markPointerParam ( void );
void    markPeriodStarParam ( void );
void    markPointerStarParam ( void );
void    pushStr ( void );
void    pushNum ( void );
void    pushDollarStr ( void );
void    pushComma ( void );
void    pushSemiColon ( void );

public:
void execute ( slk_size_t  number )
{
  switch ( number ) {
    case 1:  markSeparator();  break;
    case 2:  endStatement();  break;
    case 3:  pushId();  break;
    case 4:  buildOperator();  break;
    case 5:  buildFirstTernaryOperator();  break;
    case 6:  buildSecondTernaryOperator();  break;
    case 7:  beginStatement();  break;
    case 8:  addFunction();  break;
    case 9:  setFunctionId();  break;
    case 10:  buildNullableOperator();  break;
    case 11:  markParenthesisParam();  break;
    case 12:  markParenthesisParamEnd();  break;
    case 13:  buildHighOrderFunction();  break;
    case 14:  markBracketParam();  break;
    case 15:  markBracketParamEnd();  break;
    case 16:  markStatement();  break;
    case 17:  markStatementEnd();  break;
    case 18:  markExternScript();  break;
    case 19:  setExternScript();  break;
    case 20:  markBracketColonParam();  break;
    case 21:  markBracketColonParamEnd();  break;
    case 22:  markParenthesisColonParam();  break;
    case 23:  markParenthesisColonParamEnd();  break;
    case 24:  markAngleBracketColonParam();  break;
    case 25:  markAngleBracketColonParamEnd();  break;
    case 26:  markBracePercentParam();  break;
    case 27:  markBracePercentParamEnd();  break;
    case 28:  markBracketPercentParam();  break;
    case 29:  markBracketPercentParamEnd();  break;
    case 30:  markParenthesisPercentParam();  break;
    case 31:  markParenthesisPercentParamEnd();  break;
    case 32:  markAngleBracketPercentParam();  break;
    case 33:  markAngleBracketPercentParamEnd();  break;
    case 34:  markColonColonParam();  break;
    case 35:  markPeriodParam();  break;
    case 36:  markPointerParam();  break;
    case 37:  markPeriodStarParam();  break;
    case 38:  markPointerStarParam();  break;
    case 39:  pushStr();  break;
    case 40:  pushNum();  break;
    case 41:  pushDollarStr();  break;
    case 42:  pushComma();  break;
    case 43:  pushSemiColon();  break;
  }
}

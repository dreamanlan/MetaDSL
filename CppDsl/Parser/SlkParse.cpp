
// SlkParse.cpp - generated by the SLK parser generator 

#include "SlkParse.h"

static slk_size_t Production[] = {0

,2,54,55 ,3,55,56,102 ,3,56,71,140 ,3,57,72,140 ,3,58,74,140 
,3,59,75,140 ,3,60,77,140 ,3,61,78,140 ,3,62,79,140 
,3,63,80,140 ,3,64,81,140 ,3,65,82,140 ,3,66,83,140 
,3,67,84,140 ,3,68,85,140 ,3,69,86,140 ,3,70,87,140 
,3,71,72,103 ,3,72,74,104 ,5,73,2,141,142,57 ,9,73,3,141,143,57,4,141,144,57 
,3,74,75,105 ,3,75,76,106 ,3,76,77,107 ,3,77,78,108 
,3,78,79,109 ,3,79,80,110 ,3,80,81,111 ,3,81,82,112 
,3,82,83,113 ,3,83,84,114 ,3,84,85,115 ,3,85,86,116 
,3,86,87,117 ,3,87,88,118 ,3,88,90,119 ,3,89,90,140 
,3,90,145,91 ,2,91,120 ,4,91,146,93,121 ,4,92,100,147,122 
,2,93,95 ,5,94,20,141,148,95 ,2,94,95 ,2,95,96 ,2,95,97 
,7,96,149,21,55,150,22,123 ,7,96,152,23,55,153,24,124 
,7,96,154,25,55,155,26,125 ,5,96,156,27,157,126 ,7,96,158,28,55,159,29,127 
,7,96,160,30,55,161,31,128 ,7,96,162,32,55,163,33,129 
,7,96,164,34,55,165,35,130 ,7,96,166,36,55,167,37,131 
,7,96,168,38,55,169,39,132 ,7,96,170,40,55,171,41,133 
,5,97,172,42,98,134 ,5,97,173,43,98,135 ,5,97,174,44,98,136 
,5,97,175,45,98,137 ,5,97,176,46,98,138 ,5,98,145,146,99,140 
,3,99,100,147 ,6,99,149,21,55,150,22 ,6,99,152,23,55,153,24 
,6,99,154,25,55,155,26 ,4,99,156,27,157 ,6,99,158,28,55,159,29 
,6,99,160,30,55,161,31 ,6,99,162,32,55,163,33 ,6,99,164,34,55,165,35 
,6,99,166,36,55,167,37 ,6,99,168,38,55,169,39 ,6,99,170,40,55,171,41 
,3,100,47,141 ,3,100,48,177 ,3,100,49,178 ,3,100,50,179 
,3,101,51,180 ,3,101,52,181 ,5,102,101,139,56,102 ,1,102 
,6,103,1,141,142,57,103 ,1,103 ,2,104,73 ,1,104 ,5,105,5,141,142,58 
,1,105 ,5,106,6,141,142,59 ,1,106 ,6,107,7,141,142,60,107 
,1,107 ,6,108,8,141,142,61,108 ,1,108 ,6,109,9,141,142,62,109 
,1,109 ,6,110,10,141,142,63,110 ,1,110 ,6,111,11,141,142,64,111 
,1,111 ,6,112,12,141,142,65,112 ,1,112 ,6,113,13,141,142,66,113 
,1,113 ,6,114,14,141,142,67,114 ,1,114 ,6,115,15,141,142,68,115 
,1,115 ,6,116,16,141,142,69,116 ,1,116 ,6,117,17,141,142,70,117 
,1,117 ,5,118,18,141,142,70 ,1,118 ,6,119,19,141,142,89,119 
,1,119 ,4,120,146,92,120 ,1,120 ,4,121,146,92,121 ,1,121 
,2,122,94 ,1,122 ,3,123,151,94 ,1,123 ,3,124,151,94 ,1,124 
,3,125,151,94 ,1,125 ,3,126,151,94 ,1,126 ,3,127,151,94 
,1,127 ,3,128,151,94 ,1,128 ,3,129,151,94 ,1,129 ,3,130,151,94 
,1,130 ,3,131,151,94 ,1,131 ,3,132,151,94 ,1,132 ,3,133,151,94 
,1,133 ,3,134,151,94 ,1,134 ,3,135,151,94 ,1,135 ,3,136,151,94 
,1,136 ,3,137,151,94 ,1,137 ,3,138,151,94 ,1,138 
,0};

static slk_size_t Production_row[] = {0

,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,82,92,96,100,104,108,112,116,120,124,128,132
,136,140,144,148,152,156,160,163,168,173,176,182,185,188,191,199
,207,215,221,229,237,245,253,261,269,277,283,289,295,301,307,313
,317,324,331,338,343,350,357,364,371,378,385,392,396,400,404,408
,412,416,422,424,431,433,436,438,444,446,452,454,461,463,470,472
,479,481,488,490,497,499,506,508,515,517,524,526,533,535,542,544
,551,553,559,561,568,570,575,577,582,584,587,589,593,595,599,601
,605,607,611,613,617,619,623,625,629,631,635,637,641,643,647,649
,653,655,659,661,665,667,671,673,677,679,683
,0};

static slk_size_t Parse[] = {

0,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123
,123,123,122,122,123,122,123,122,123,122,122,123,122,123,122,123,122,123,122,123
,122,123,122,123,122,122,122,122,122,123,123,123,123,123,123,123,125,125,125,125
,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,124,124,125,124,125
,124,125,124,124,125,124,125,124,125,124,125,124,125,124,125,124,125,124,124,124
,124,124,125,125,125,125,125,125,125,127,127,127,127,127,127,127,127,127,127,127
,127,127,127,127,127,127,127,127,126,126,127,126,127,126,127,126,126,127,126,127
,126,127,126,127,126,127,126,127,126,127,126,126,126,126,126,127,127,127,127,127
,127,127,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129
,129,128,128,129,128,129,128,129,128,128,129,128,129,128,129,128,129,128,129,128
,129,128,129,128,128,128,128,128,129,129,129,129,129,129,129,131,131,131,131,131
,131,131,131,131,131,131,131,131,131,131,131,131,131,131,130,130,131,130,131,130
,131,130,130,131,130,131,130,131,130,131,130,131,130,131,130,131,130,130,130,130
,130,131,131,131,131,131,131,131,133,133,133,133,133,133,133,133,133,133,133,133
,133,133,133,133,133,133,133,132,132,133,132,133,132,133,132,132,133,132,133,132
,133,132,133,132,133,132,133,132,133,132,132,132,132,132,133,133,133,133,133,133
,133,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135
,134,134,135,134,135,134,135,134,134,135,134,135,134,135,134,135,134,135,134,135
,134,135,134,134,134,134,134,135,135,135,135,135,135,135,137,137,137,137,137,137
,137,137,137,137,137,137,137,137,137,137,137,137,137,136,136,137,136,137,136,137
,136,136,137,136,137,136,137,136,137,136,137,136,137,136,137,136,136,136,136,136
,137,137,137,137,137,137,137,139,139,139,139,139,139,139,139,139,139,139,139,139
,139,139,139,139,139,139,138,138,139,138,139,138,139,138,138,139,138,139,138,139
,138,139,138,139,138,139,138,139,138,138,138,138,138,139,139,139,139,139,139,139
,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,141,140
,140,141,140,141,140,141,140,140,141,140,141,140,141,140,141,140,141,140,141,140
,141,140,140,140,140,140,141,141,141,141,141,141,141,143,143,143,143,143,143,143
,143,143,143,143,143,143,143,143,143,143,143,143,142,142,143,142,143,142,143,142
,142,143,142,143,142,143,142,143,142,143,142,143,142,143,142,142,142,142,142,143
,143,143,143,143,143,143,145,145,145,145,145,145,145,145,145,145,145,145,145,145
,145,145,145,145,145,144,144,145,144,145,144,145,144,144,145,144,145,144,145,144
,145,144,145,144,145,144,145,144,144,144,144,144,145,145,145,145,145,145,145,147
,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,147,146,146
,147,146,147,146,147,146,146,147,146,147,146,147,146,147,146,147,146,147,146,147
,146,146,146,146,146,147,147,147,147,147,147,147,149,149,149,149,149,149,149,149
,149,149,149,149,149,149,149,149,149,149,149,148,148,149,148,149,148,149,148,148
,149,148,149,148,149,148,149,148,149,148,149,148,149,148,148,148,148,148,149,149
,149,149,149,149,149,151,151,151,151,151,151,151,151,151,151,151,151,151,151,151
,151,151,151,151,150,150,151,150,151,150,151,150,150,151,150,151,150,151,150,151
,150,151,150,151,150,151,150,150,150,150,150,151,151,151,151,151,151,151,153,153
,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,153,152,152,153
,152,153,152,153,152,152,153,152,153,152,153,152,153,152,153,152,153,152,153,152
,152,152,152,152,153,153,153,153,153,153,153,155,155,155,155,155,155,155,155,155
,155,155,155,155,155,155,155,155,155,155,154,154,155,154,155,154,155,154,154,155
,154,155,154,155,154,155,154,155,154,155,154,155,154,154,154,154,154,155,155,155
,155,155,155,155,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,0,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,0,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,0,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,0,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0
,40,39,40,39,40,39,40,40,39,40,39,40,39,40,39,40,39,40,39,40
,39,40,40,40,40,40,39,39,39,39,39,39,39,2,2,2,0,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,3,3,3,0,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,18
,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,1,1,1,0,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1
,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1
,1,1,1,1,1,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119
,119,119,119,119,43,44,119,44,119,44,119,44,44,119,44,119,44,119,44,119
,44,119,44,119,44,119,44,44,44,44,44,118,118,118,118,119,119,119,121,121
,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,0,42,121
,42,121,42,121,42,42,121,42,121,42,121,42,121,42,121,42,121,42,121,42
,42,42,42,42,120,120,120,120,121,121,121,117,117,117,117,117,117,117,117,117
,117,117,117,117,117,117,117,117,117,116,0,45,117,45,117,45,117,45,45,117
,45,117,45,117,45,117,45,117,45,117,45,117,46,46,46,46,46,41,41,41
,41,117,117,117,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115
,115,114,20,21,63,115,63,115,63,115,63,63,115,63,115,63,115,63,115,63
,115,63,115,63,115,58,59,60,61,62,63,63,63,63,115,115,115,113,113,113
,113,113,113,113,113,113,113,113,113,113,113,113,113,112,80,81,0,65,113,66
,113,67,113,68,69,113,70,113,71,113,72,113,73,113,74,113,75,113,76,77
,78,79,0,64,64,64,64,113,113,113,111,111,111,111,111,111,111,111,111,111
,111,111,111,111,111,110,0,0,0,0,47,111,48,111,49,111,50,51,111,52
,111,53,111,54,111,55,111,56,111,57,111,0,0,0,0,0,0,0,0,0
,111,111,111,109,109,109,109,109,109,109,109,109,109,109,109,109,109,108,0,0
,0,0,0,0,109,0,109,0,109,0,0,109,0,109,0,109,0,109,0,109
,0,109,0,109,0,0,0,0,0,0,0,0,0,109,109,109,107,107,107,107
,107,107,107,107,107,107,107,107,107,106,0,0,0,0,0,0,0,107,0,107
,0,107,0,0,107,0,107,0,107,0,107,0,107,0,107,0,107,0,0,0
,0,0,0,0,0,0,107,107,107,105,105,105,105,105,105,105,105,105,105,105
,105,104,0,0,0,0,0,0,0,0,105,0,105,0,105,0,0,105,0,105
,0,105,0,105,0,105,0,105,0,105,0,0,0,0,0,0,0,0,0,105
,105,105,103,103,103,103,103,103,103,103,103,103,103,102,0,0,0,0,0,0
,0,0,0,103,0,103,0,103,0,0,103,0,103,0,103,0,103,0,103,0
,103,0,103,0,0,0,0,0,0,0,0,0,103,103,103,101,101,101,101,101
,101,101,101,101,101,100,0,0,0,0,0,0,0,0,0,0,101,0,101,0
,101,0,0,101,0,101,0,101,0,101,0,101,0,101,0,101,0,0,0,0
,0,0,0,0,0,101,101,101,99,99,99,99,99,99,99,99,99,98,0,0
,0,0,0,0,0,0,0,0,0,99,0,99,0,99,0,0,99,0,99,0
,99,0,99,0,99,0,99,0,99,97,97,97,97,97,97,97,97,96,99,99
,99,0,0,0,0,0,0,0,0,0,97,0,97,0,97,0,0,97,0,97
,0,97,0,97,0,97,0,97,0,97,95,95,95,95,95,95,95,94,0,97
,97,97,0,0,0,0,0,0,0,0,0,95,0,95,0,95,0,0,95,0
,95,0,95,0,95,0,95,0,95,0,95,93,93,93,93,93,93,92,0,0
,95,95,95,0,0,0,0,0,0,0,0,0,93,0,93,0,93,0,0,93
,0,93,0,93,0,93,0,93,0,93,0,93,91,91,91,91,91,90,0,0
,0,93,93,93,0,0,0,0,0,0,0,0,0,91,0,91,0,91,0,0
,91,0,91,0,91,0,91,0,91,0,91,0,91,89,89,89,89,88,0,0
,0,0,91,91,91,0,0,0,0,0,0,0,0,0,89,0,89,0,89,0
,0,89,0,89,0,89,0,89,0,89,0,89,0,89,87,86,86,87,0,0
,0,0,0,89,89,89,0,0,0,0,0,0,0,0,0,87,0,87,0,87
,0,0,87,0,87,0,87,84,87,0,87,0,87,0,87,0,0,0,0,0
,0,0,0,0,87,87,87,0,85,0,85,0,85,0,0,85,0,85,0,85
,0,85,0,85,0,85,0,85,0,0,0,0,0,0,0,0,0,85,85,85
,83,0,83,0,83,0,0,83,0,83,0,83,0,83,0,83,0,83,0,83
,0,0,0,0,0,0,0,0,0,82,82,83
};

static slk_size_t Parse_row[] = {0

,2810,2651,2704,902,955,1008,1061,1114,1167,1220,1273,1326,1379,1432,1485,1538
,1591,2757,1644,3039,1697,1750,1803,1856,1909,1962,2015,2068,2121,2174,2227,2280
,2333,2386,2439,2492,2545,2598,2969,2916,2863,2969,3128,3022,3022,3075,3070,3042
,3757,3725,3692,3651,3610,3569,3528,3487,3446,3393,3340,3287,3234,3181,3128,3075
,3022,2969,2863,2916,1,54,107,160,213,266,319,372,425,478,531,584
,637,690,743,796,849
,0};

static slk_size_t Conflict[] = {

0
};

static slk_size_t Conflict_row[] = {0


,0};

#define GET_CONDITIONAL_PRODUCTION( symbol )  0 
#define get_predicted_entry( a,b,c,d,e )  0 

#define START_SYMBOL 54
#define END_OF_SLK_INPUT_ 53
#define START_STATE 0
#define START_CONFLICT 156
#define END_CONFLICT 156
#define START_ACTION 139
#define END_ACTION 182
#define TOTAL_CONFLICTS 0
#define PARSE_STACK_SIZE 65535
#define SLK_PUSH(symbol,stack,top) if ( top > stack ) { *--top = symbol; } else { message( error, "stack overflow\n", tokens ); }
#define SLK_POP(top)   (*top ? *top++ : 0)

#define peek(self,a)                   self.peek(a)
#define get(self)                      self.get()
#define mismatch(self,a,b,c)           self.mismatch(a,b,c)
#define no_entry(self,a,b,c,d,e)       self.no_entry(a,b,c,d,e)
#define input_left(self,a)             self.input_left(a)
#define message(self,a,b)              self.message(a,b)
#define predict(self,a,b,c,d,e,f,g,h)  self.predict(a,b,c,d,e,f,g,h)
#define reduce(self,a)                 self.reduce(a)
#define state(self,a)                  self.state(a)
#define execute(self,a)                self.execute(a)

#define NOT_A_SYMBOL       0
#define NONTERMINAL_SYMBOL 1
#define TERMINAL_SYMBOL    2
#define ACTION_SYMBOL      3

int SlkGetSymbolType ( slk_size_t symbol )
{
   int   symbol_type = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

slk_size_t *SlkGetProductionArray ( slk_size_t   production_number )
{
    return   &Production [ Production_row [production_number] ];
}

int SlkIsNonterminal ( slk_size_t symbol )
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

int SlkIsTerminal ( slk_size_t symbol )
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

int SlkIsAction ( slk_size_t symbol )
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

void SlkParse ( SlkAction  &action, 
                SlkToken   &tokens, 
                SlkError   &error, 
                slk_size_t  start_symbol ) 
{
 slk_size_t  *top, *production;
 slk_size_t   production_number, entry, symbol, token, new_token;
 int          production_length, index, level;
 slk_size_t   stack [ PARSE_STACK_SIZE ];

 top = stack + (PARSE_STACK_SIZE-1);
 *top = 0;
 if ( ! start_symbol ) {
     start_symbol = START_SYMBOL;
 }
 SLK_PUSH ( start_symbol, stack, top );
 token = get(tokens);
 new_token = token;

 for ( symbol = SLK_POP ( top );  symbol;  ) {

     if ( symbol >= START_ACTION ) {
         execute ( action, (symbol-(START_ACTION-1)) );

     } else if ( symbol >= START_SYMBOL ) {
         entry = 0;
         level = 1;
         production_number = GET_CONDITIONAL_PRODUCTION ( symbol );
         if ( production_number ) {
             entry = get_predicted_entry ( tokens,
                                           production_number, token,
                                           level, 1 );
         }
         if ( ! entry ) {
             index = Parse_row [symbol - (START_SYMBOL-1)];
             index += token;
             entry = Parse [ index ];
         }
         while ( entry >= START_CONFLICT ) {
             index = Conflict_row [entry - (START_CONFLICT -1)];
             index += peek (tokens, level);
             entry = Conflict [ index ];
             ++level;
         }
         if ( entry ) {
             production = &Production [ Production_row [entry] ];
             production_length = *production - 1;
             if ( *++production == symbol ) {
                 predict ( action, entry, symbol, token, level - 1, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber() );
                 production += production_length;
                 for (;  production_length-- > 0;  --production ) {
                     SLK_PUSH ( *production, stack, top );
                 }
             } else {
                 new_token = no_entry ( error, entry, symbol, token, level - 1, tokens );
             }
         } else {
             new_token = no_entry ( error, entry, symbol, token, level - 1, tokens );
         }
     } else if ( symbol > 0 ) {
         if ( symbol == token ) {
             token = get(tokens);
             new_token = token;
         } else {
             new_token = mismatch ( error, symbol, token, tokens );
         }
     } else {
         message(error, "\n parser error: symbol value 0\n", tokens);
     }
     if ( token != new_token ) {
         if ( new_token ) {
             token = new_token;
         }
         if ( token != END_OF_SLK_INPUT_ ) {
             continue;
         }
     }
     symbol = SLK_POP ( top );
 }
 if ( token != END_OF_SLK_INPUT_ ) {
     input_left ( error, tokens );
 }
}


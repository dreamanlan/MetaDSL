use DslCommon;

pub mod DslParser;
pub mod DslContstants;
pub mod DslString;
pub mod DslToken;

macro_rules! count_elements {
    ($($element:expr),*) => {
        <[()]>::len(&[$(count_elements!(@single $element)),*])
    };
    (@single $element:expr) => {
        ()
    };
}

macro_rules! static_array {
    ($name:ident, $($element:expr),*) => {
        static $name: [i16; count_elements!($($element),*)] = [$($element),*];
    };
}

static_array!(Production, 0
,2,54,55 ,3,55,56,107 ,3,56,71,145 ,3,57,72,145 ,3,58,74,145
,3,59,75,145 ,3,60,77,145 ,3,61,78,145 ,3,62,79,145
,3,63,80,145 ,3,64,81,145 ,3,65,82,145 ,3,66,83,145
,3,67,84,145 ,3,68,85,145 ,3,69,86,145 ,3,70,87,145
,3,71,72,108 ,3,72,74,109 ,5,73,2,146,147,57 ,9,73,3,146,148,57,4,146,149,57
,3,74,75,110 ,3,75,76,111 ,3,76,77,112 ,3,77,78,113
,3,78,79,114 ,3,79,80,115 ,3,80,81,116 ,3,81,82,117
,3,82,83,118 ,3,83,84,119 ,3,84,85,120 ,3,85,86,121
,3,86,87,122 ,3,87,88,123 ,3,88,90,124 ,3,89,90,145
,3,90,150,91 ,2,91,125 ,4,91,151,93,126 ,4,92,105,152,127
,2,93,95 ,5,94,20,146,153,95 ,2,94,95 ,2,95,96 ,2,95,97
,6,96,154,21,55,22,128 ,6,96,156,23,55,24,129 ,6,96,157,25,55,26,130
,5,96,158,27,159,131 ,6,96,160,28,55,29,132 ,6,96,161,30,55,31,133
,6,96,162,32,55,33,134 ,6,96,163,34,55,35,135 ,6,96,164,36,55,37,136
,6,96,165,38,55,39,137 ,6,96,166,40,55,41,138 ,4,97,42,98,139
,4,97,43,99,140 ,4,97,44,100,141 ,4,97,45,101,142 ,4,97,46,102,143
,3,98,167,103 ,3,99,168,103 ,3,100,169,103 ,3,101,170,103
,3,102,171,103 ,5,103,150,151,104,145 ,3,104,105,152 ,5,104,154,21,55,22
,5,104,156,23,55,24 ,5,104,157,25,55,26 ,4,104,158,27,159
,5,104,160,28,55,29 ,5,104,161,30,55,31 ,5,104,162,32,55,33
,5,104,163,34,55,35 ,5,104,164,36,55,37 ,5,104,165,38,55,39
,5,104,166,40,55,41 ,3,105,47,146 ,3,105,48,172 ,3,105,49,173
,3,105,50,174 ,3,106,51,175 ,3,106,52,176 ,5,107,106,144,56,107
,1,107 ,6,108,1,146,147,57,108 ,1,108 ,2,109,73 ,1,109
,5,110,5,146,147,58 ,1,110 ,5,111,6,146,147,59 ,1,111
,6,112,7,146,147,60,112 ,1,112 ,6,113,8,146,147,61,113
,1,113 ,6,114,9,146,147,62,114 ,1,114 ,6,115,10,146,147,63,115
,1,115 ,6,116,11,146,147,64,116 ,1,116 ,6,117,12,146,147,65,117
,1,117 ,6,118,13,146,147,66,118 ,1,118 ,6,119,14,146,147,67,119
,1,119 ,6,120,15,146,147,68,120 ,1,120 ,6,121,16,146,147,69,121
,1,121 ,6,122,17,146,147,70,122 ,1,122 ,5,123,18,146,147,70
,1,123 ,6,124,19,146,147,89,124 ,1,124 ,4,125,151,92,125
,1,125 ,4,126,151,92,126 ,1,126 ,2,127,94 ,1,127 ,3,128,155,94
,1,128 ,3,129,155,94 ,1,129 ,3,130,155,94 ,1,130 ,3,131,155,94
,1,131 ,3,132,155,94 ,1,132 ,3,133,155,94 ,1,133 ,3,134,155,94
,1,134 ,3,135,155,94 ,1,135 ,3,136,155,94 ,1,136 ,3,137,155,94
,1,137 ,3,138,155,94 ,1,138 ,3,139,155,94 ,1,139 ,3,140,155,94
,1,140 ,3,141,155,94 ,1,141 ,3,142,155,94 ,1,142 ,3,143,155,94
,1,143
,0);

static_array!(Production_row,0
,1,4,8,12,16,20,24,28,32,36,40,44,48,52,56,60
,64,68,72,76,82,92,96,100,104,108,112,116,120,124,128,132
,136,140,144,148,152,156,160,163,168,173,176,182,185,188,191,198
,205,212,218,225,232,239,246,253,260,267,272,277,282,287,292,296
,300,304,308,312,318,322,328,334,340,345,351,357,363,369,375,381
,387,391,395,399,403,407,411,417,419,426,428,431,433,439,441,447
,449,456,458,465,467,474,476,483,485,492,494,501,503,510,512,519
,521,528,530,537,539,546,548,554,556,563,565,570,572,577,579,582
,584,588,590,594,596,600,602,606,608,612,614,618,620,624,626,630
,632,636,638,642,644,648,650,654,656,660,662,666,668,672,674,678

,0);

static_array!(Parse,
0,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128
,128,128,127,127,128,127,128,127,128,127,127,128,127,128,127,128,127,128,127,128
,127,128,127,128,127,127,127,127,127,128,128,128,128,128,128,128,130,130,130,130
,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,129,129,130,129,130
,129,130,129,129,130,129,130,129,130,129,130,129,130,129,130,129,130,129,129,129
,129,129,130,130,130,130,130,130,130,132,132,132,132,132,132,132,132,132,132,132
,132,132,132,132,132,132,132,132,131,131,132,131,132,131,132,131,131,132,131,132
,131,132,131,132,131,132,131,132,131,132,131,131,131,131,131,132,132,132,132,132
,132,132,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134
,134,133,133,134,133,134,133,134,133,133,134,133,134,133,134,133,134,133,134,133
,134,133,134,133,133,133,133,133,134,134,134,134,134,134,134,136,136,136,136,136
,136,136,136,136,136,136,136,136,136,136,136,136,136,136,135,135,136,135,136,135
,136,135,135,136,135,136,135,136,135,136,135,136,135,136,135,136,135,135,135,135
,135,136,136,136,136,136,136,136,138,138,138,138,138,138,138,138,138,138,138,138
,138,138,138,138,138,138,138,137,137,138,137,138,137,138,137,137,138,137,138,137
,138,137,138,137,138,137,138,137,138,137,137,137,137,137,138,138,138,138,138,138
,138,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140,140
,139,139,140,139,140,139,140,139,139,140,139,140,139,140,139,140,139,140,139,140
,139,140,139,139,139,139,139,140,140,140,140,140,140,140,142,142,142,142,142,142
,142,142,142,142,142,142,142,142,142,142,142,142,142,141,141,142,141,142,141,142
,141,141,142,141,142,141,142,141,142,141,142,141,142,141,142,141,141,141,141,141
,142,142,142,142,142,142,142,144,144,144,144,144,144,144,144,144,144,144,144,144
,144,144,144,144,144,144,143,143,144,143,144,143,144,143,143,144,143,144,143,144
,143,144,143,144,143,144,143,144,143,143,143,143,143,144,144,144,144,144,144,144
,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,146,145
,145,146,145,146,145,146,145,145,146,145,146,145,146,145,146,145,146,145,146,145
,146,145,145,145,145,145,146,146,146,146,146,146,146,148,148,148,148,148,148,148
,148,148,148,148,148,148,148,148,148,148,148,148,147,147,148,147,148,147,148,147
,147,148,147,148,147,148,147,148,147,148,147,148,147,148,147,147,147,147,147,148
,148,148,148,148,148,148,150,150,150,150,150,150,150,150,150,150,150,150,150,150
,150,150,150,150,150,149,149,150,149,150,149,150,149,149,150,149,150,149,150,149
,150,149,150,149,150,149,150,149,149,149,149,149,150,150,150,150,150,150,150,152
,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,152,151,151
,152,151,152,151,152,151,151,152,151,152,151,152,151,152,151,152,151,152,151,152
,151,151,151,151,151,152,152,152,152,152,152,152,154,154,154,154,154,154,154,154
,154,154,154,154,154,154,154,154,154,154,154,153,153,154,153,154,153,154,153,153
,154,153,154,153,154,153,154,153,154,153,154,153,154,153,153,153,153,153,154,154
,154,154,154,154,154,156,156,156,156,156,156,156,156,156,156,156,156,156,156,156
,156,156,156,156,155,155,156,155,156,155,156,155,155,156,155,156,155,156,155,156
,155,156,155,156,155,156,155,155,155,155,155,156,156,156,156,156,156,156,158,158
,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,158,157,157,158
,157,158,157,158,157,157,158,157,158,157,158,157,158,157,158,157,158,157,158,157
,157,157,157,157,158,158,158,158,158,158,158,160,160,160,160,160,160,160,160,160
,160,160,160,160,160,160,160,160,160,160,159,159,160,159,160,159,160,159,159,160
,159,160,159,160,159,160,159,160,159,160,159,160,159,159,159,159,159,160,160,160
,160,160,160,160,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,0,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,5,5,5
,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5
,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,0,6,6,6,6,6,6,6,6,6,6
,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6
,6,6,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,0,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7
,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,8,8,8,8
,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8
,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9
,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9
,9,9,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10
,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11
,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11
,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12
,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12
,12,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13
,13,13,13,13,13,13,13,13,13,13,13,13,13,13,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14
,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14
,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,0,15,15,15,15,15,15,15,15,15,15,15,15,15
,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0
,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16
,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,0,17,17,17,17,17,17,17
,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17
,17,17,17,17,17,17,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,0,19,19,19,19,19,19,19,19,19,19,19,19,19,19
,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,22
,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22
,22,22,22,22,22,22,22,22,22,22,22,22,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,0,23,23,23,23,23,23,23,23
,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23
,23,23,23,23,23,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24
,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,25,25
,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25
,25,25,25,25,25,25,25,25,25,25,25,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,0,26,26,26,26,26,26,26,26,26
,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26
,26,26,26,26,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,0,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27
,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28
,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28
,28,28,28,28,28,28,28,28,28,28,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,0,29,29,29,29,29,29,29,29,29,29
,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29
,29,29,29,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30
,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,31,31,31,31
,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31
,31,31,31,31,31,31,31,31,31,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,0,32,32,32,32,32,32,32,32,32,32,32
,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32
,32,32,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,0,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33
,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,0,34,34,34,34,34
,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34
,34,34,34,34,34,34,34,34,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,0,35,35,35,35,35,35,35,35,35,35,35,35
,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35
,35,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,0,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36
,36,36,36,36,36,36,36,36,36,36,36,36,36,36,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,0,37,37,37,37,37,37
,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37
,37,37,37,37,37,37,37,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,0,38,38,38,38,38,38,38,38,38,38,38,38,38
,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38
,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,0
,40,39,40,39,40,39,40,40,39,40,39,40,39,40,39,40,39,40,39,40
,39,40,40,40,40,40,39,39,39,39,39,39,39,2,2,2,0,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,0,2,2,2,2,2,2,2
,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
,2,2,2,2,2,2,3,3,3,0,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,0,3,3,3,3,3,3,3,3,3,3,3,3,3,3
,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,18
,18,18,0,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,0,18
,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18
,18,18,18,18,18,18,18,18,18,18,18,18,1,1,1,0,1,1,1,1
,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,0,1,0,1,1
,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1
,1,1,1,1,1,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124
,124,124,124,124,43,44,124,44,124,44,124,44,44,124,44,124,44,124,44,124
,44,124,44,124,44,124,44,44,44,44,44,123,123,123,123,124,124,124,126,126
,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,0,42,126
,42,126,42,126,42,42,126,42,126,42,126,42,126,42,126,42,126,42,126,42
,42,42,42,42,125,125,125,125,126,126,126,122,122,122,122,122,122,122,122,122
,122,122,122,122,122,122,122,122,122,121,0,45,122,45,122,45,122,45,45,122
,45,122,45,122,45,122,45,122,45,122,45,122,46,46,46,46,46,41,41,41
,41,122,122,122,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120
,120,119,20,21,63,120,63,120,63,120,63,63,120,63,120,63,120,63,120,63
,120,63,120,63,120,58,59,60,61,62,63,63,63,63,120,120,120,118,118,118
,118,118,118,118,118,118,118,118,118,118,118,118,118,117,85,86,0,64,118,64
,118,64,118,64,64,118,64,118,64,118,64,118,64,118,64,118,64,118,81,82
,83,84,0,64,64,64,64,118,118,118,116,116,116,116,116,116,116,116,116,116
,116,116,116,116,116,115,0,0,0,0,65,116,65,116,65,116,65,65,116,65
,116,65,116,65,116,65,116,65,116,65,116,0,0,0,0,0,65,65,65,65
,116,116,116,114,114,114,114,114,114,114,114,114,114,114,114,114,114,113,0,0
,0,0,0,66,114,66,114,66,114,66,66,114,66,114,66,114,66,114,66,114
,66,114,66,114,0,0,0,0,0,66,66,66,66,114,114,114,112,112,112,112
,112,112,112,112,112,112,112,112,112,111,0,0,0,0,0,0,67,112,67,112
,67,112,67,67,112,67,112,67,112,67,112,67,112,67,112,67,112,0,0,0
,0,0,67,67,67,67,112,112,112,110,110,110,110,110,110,110,110,110,110,110
,110,109,0,0,0,0,0,0,0,68,110,68,110,68,110,68,68,110,68,110
,68,110,68,110,68,110,68,110,68,110,0,0,0,0,0,68,68,68,68,110
,110,110,108,108,108,108,108,108,108,108,108,108,108,107,0,0,0,0,0,0
,0,0,70,108,71,108,72,108,73,74,108,75,108,76,108,77,108,78,108,79
,108,80,108,0,0,0,0,0,69,69,69,69,108,108,108,106,106,106,106,106
,106,106,106,106,106,105,0,0,0,0,0,0,0,0,0,47,106,48,106,49
,106,50,51,106,52,106,53,106,54,106,55,106,56,106,57,106,0,0,0,0
,0,0,0,0,0,106,106,106,104,104,104,104,104,104,104,104,104,103,0,0
,0,0,0,0,0,0,0,0,0,104,0,104,0,104,0,0,104,0,104,0
,104,0,104,0,104,0,104,0,104,102,102,102,102,102,102,102,102,101,104,104
,104,0,0,0,0,0,0,0,0,0,102,0,102,0,102,0,0,102,0,102
,0,102,0,102,0,102,0,102,0,102,100,100,100,100,100,100,100,99,0,102
,102,102,0,0,0,0,0,0,0,0,0,100,0,100,0,100,0,0,100,0
,100,0,100,0,100,0,100,0,100,0,100,98,98,98,98,98,98,97,0,0
,100,100,100,0,0,0,0,0,0,0,0,0,98,0,98,0,98,0,0,98
,0,98,0,98,0,98,0,98,0,98,0,98,96,96,96,96,96,95,0,0
,0,98,98,98,0,0,0,0,0,0,0,0,0,96,0,96,0,96,0,0
,96,0,96,0,96,0,96,0,96,0,96,0,96,94,94,94,94,93,0,0
,0,0,96,96,96,0,0,0,0,0,0,0,0,0,94,0,94,0,94,0
,0,94,0,94,0,94,0,94,0,94,0,94,0,94,92,91,91,92,0,0
,0,0,0,94,94,94,0,0,0,0,0,0,0,0,0,92,0,92,0,92
,0,0,92,0,92,0,92,89,92,0,92,0,92,0,92,0,0,0,0,0
,0,0,0,0,92,92,92,0,90,0,90,0,90,0,0,90,0,90,0,90
,0,90,0,90,0,90,0,90,0,0,0,0,0,0,0,0,0,90,90,90
,88,0,88,0,88,0,0,88,0,88,0,88,0,88,0,88,0,88,0,88
,0,0,0,0,0,0,0,0,0,87,87,88
);

static_array!(Parse_row, 0
,2810,2651,2704,902,955,1008,1061,1114,1167,1220,1273,1326,1379,1432,1485,1538
,1591,2757,1644,3039,1697,1750,1803,1856,1909,1962,2015,2068,2121,2174,2227,2280
,2333,2386,2439,2492,2545,2598,2969,2916,2863,2969,3393,3022,3022,3075,3128,3181
,3234,3287,3340,3070,3042,3757,3725,3692,3651,3610,3569,3528,3487,3446,3393,3340
,3287,3234,3181,3128,3075,3022,2969,2863,2916,1,54,107,160,213,266,319
,372,425,478,531,584,637,690,743,796,849
,0);

static_array!(Conflict,
0
);

static_array!(Conflict_row, 0
,0);

fn get_conditional_production ( symbol : i16 ) -> i16 { return 0; }

const END_OF_SLK_INPUT_ : i16 = 53;
const START_SYMBOL : i16 = 54;
const START_STATE : i16 = 0;
const START_CONFLICT : i16 = 161;
const END_CONFLICT : i16 = 161;
const START_ACTION : i16 = 144;
const END_ACTION : i16 = 177;
const TOTAL_CONFLICTS : i16 = 0;

pub const NOT_A_SYMBOL : i32 = 0;
pub const NONTERMINAL_SYMBOL : i32 = 1;
pub const TERMINAL_SYMBOL : i32 = 2;
pub const ACTION_SYMBOL : i32 = 3;

pub const PARSE_STACK_SIZE : i32 = 65535;

pub fn GetProductionArray (production_number : i16) -> [i16;14]
{
   let mut index = Production_row[production_number];
   let mut array_length = Production[index];
   let mut new_index = 0;
   let mut productionArray : [i16;14] = [0;14];

   while ( array_length-- >= 0 ) {
       productionArray[new_index] = Production[index];
       new_index += 1;
       index += 1;
   }
   return  productionArray;
}

pub fn GetSymbolType(symbol : i16) -> i16
{
   let mut symbol_type : i32 = NOT_A_SYMBOL;

   if ( symbol >= START_ACTION  &&  symbol < END_ACTION ) {
       symbol_type = ACTION_SYMBOL;
   } else if ( symbol >= START_SYMBOL ) {
       symbol_type = NONTERMINAL_SYMBOL;
   } else if ( symbol > 0 ) {
       symbol_type = TERMINAL_SYMBOL;
   }
   return  symbol_type;
}

pub fn IsNonterminal (symbol : i16) -> bool
{
   return ( symbol >= START_SYMBOL  &&  symbol < START_ACTION );
}

pub fn IsTerminal (symbol : i16) -> bool
{
   return ( symbol > 0  &&  symbol < START_SYMBOL );
}

pub fn IsAction (symbol : i16) -> bool
{
   return ( symbol >= START_ACTION  &&  symbol < END_ACTION );
}

pub fn GetTerminalIndex (token : i16) -> i16
{
    return ( token );
}

pub fn get_production (conflict_number : i16, tokens : &DslToken) -> i16
{
    let mut   entry : i16 = 0;
    let mut   index : i32, level : i32;

    if ( conflict_number <= TOTAL_CONFLICTS ) {
        entry = (short) ( conflict_number + (START_CONFLICT - 1) );
        level = 1;
        while ( entry >= START_CONFLICT ) {
            index = Conflict_row [entry - (START_CONFLICT -1)];
            index += tokens.peek ( level );
            entry = Conflict [ index ];
            level += 1;
        }
    }

    return entry;
}

fn get_predicted_entry (tokens : &DslToken,
                        production_number : i16,
                        token : i16,
                        scan_level : i32,
                        depth : i32) -> i16
{
    return 0;
}

pub fn Accept(visitor : &IVisitor)
{
    visitor.Visit(Production, Production_row, Parse, Parse_row, START_SYMBOL, START_ACTION);
}

pub fn parse (action : &DslAction,
            tokens : &DslToken,
            error : &DslError,
            start_symbol : i16)
{
    let mut     lhs : i16;
    let mut     production_number : i16, entry : i16, symbol : i16, token : i16, new_token : i16;
    let mut     production_length : i32, top : i32, index : i32, level : i32;
    let stack : [i16;PARSE_STACK_SIZE] = [0;PARSE_STACK_SIZE];

    top = PARSE_STACK_SIZE - 1;
    stack [ top ] = 0;
    if ( start_symbol == 0 ) {
        start_symbol = START_SYMBOL;
    }
    if ( top > 0 ) {
        top -= 1;
        stack [top] = start_symbol;
    } else {
        error.message ("DslParse: stack overflow\n", ref tokens); return;
    }
    token = tokens.get();
    new_token = token;

    if (stack[top] != 0) {
        symbol = stack[top];
        top += 0;
    }
    else {
        symbol = 0;
    }

    while (symbol != 0) {

        if ( symbol >= START_ACTION ) {
            action.execute ( symbol - (START_ACTION-1) );
        } else if ( symbol >= START_SYMBOL ) {
            entry = 0;
            level = 1;
            production_number = get_conditional_production ( symbol );
            if ( production_number != 0 ) {
                entry = get_predicted_entry ( ref tokens,
                                            production_number, token,
                                            level, 1 );
            }
            if ( entry == 0 ) {
                index = Parse_row [ symbol - (START_SYMBOL-1) ];
                index += token;
                entry = Parse [ index ];
            }
            while ( entry >= START_CONFLICT ) {
                index = Conflict_row [entry - (START_CONFLICT -1)];
                index += tokens.peek (level);
                entry = Conflict [ index ];
                level += 1;
            }
            if ( entry != 0 ) {
                index = Production_row [ entry ];
                production_length = Production [ index ] - 1;
                index += 1;
                lhs = Production [ index ];
                if ( lhs == symbol ) {
                    action.predict ( entry, symbol, token, level - 1, tokens.getLastToken(), tokens.getLastLineNumber(), tokens.getCurToken(), tokens.getLineNumber() );
                    index += production_length;
                    for (;  production_length-- > 0;  --index ) {
                    if ( top > 0 ) {
                        top -= 1;
                        stack [top] = Production [index];
                    } else {
                        error.message ("DslParse: stack overflow\n", ref tokens); return;
                    }
                    }
                } else {
                    new_token = error.no_entry ( entry, symbol, token, level - 1, ref tokens );
                }
            } else {                                       // no table entry
                new_token = error.no_entry ( entry, symbol, token, level - 1, ref tokens );
            }
        } else if ( symbol > 0 ) {
            if ( symbol == token ) {
                token = tokens.get();
                new_token = token;
            } else {
                new_token = error.mismatch ( symbol, token, ref tokens );
            }
        } else {
            error.message ( "\n parser error: symbol value 0\n", ref tokens );
        }
        if ( token != new_token ) {
            if ( new_token != 0 ) {
                token = new_token;
            }
            if ( token != END_OF_SLK_INPUT_ ) {
                continue;
            }
        }
        if stack[top] != 0 {
            symbol = stack[top];
            top += 1;
        }
        else {
            symbol = 0;
        }
    }
    if ( token != END_OF_SLK_INPUT_ ) {
        error.input_left (ref tokens);
    }
}

@@delimiter(string,BEGIN_STRING,END_STRING);
@@delimiter(script,BEGIN_SCRIPT,END_SCRIPT);
skill(kkk)
{
	section(80)//fdafds
	{ #fdafdsa
		//fdfdasfdsa;
		ok(
    BEGIN_STRING
		yyyy yyyy yyyy
		END_STRING
    );		#fdafdsa
    ok(
    BEGIN_STRINGyyyy yyyy yyyyEND_STRING
    );
    a = BEGIN_STRINGyyyy yyyy yyyyEND_STRING;
    attr(1005) = (attr(1001) + attr(1002) * attr(2001)) * (1 + attr(1003)) + attr(1004);
    a>b /*3456*/ ? 1 : 0;
    a/*123*/+/*345*/b*c;
    //animation(abc);
    test(/*0987*/);
    test(123,/*fda*/345,678/*7888*/);	//fdasfdas
	};	//fdafdas
	script(sss)
	BEGIN_SCRIPT
		ok, this is a test, "yeah!!!";
	END_SCRIPT;
  script(ttt:string, tt2:int)
  {: abcd :};
  (:attr:)
  script(ttt)
  {:
  :};
  [:attr:]
  script(ttt)
  {:
  abcdef;
  defg;
  :};
  @@delimiter(string,"[[","]]");
  a = "b";
  a = [[ abcd ]];
  template<:a,b,c:>class A;
  a::b::c;
  a::b(abcd);
  a::(abcd);
  b::[abcd];
  c::{abcd};
  {%abcd%};
  [%abcd%];
  (%abcd%);
  <%abcd%>;
	a -> {};
	a -> [];
	a -> ();
	a ->* b;
	a -> func();
	a ?.* p();
	a ?. b;
	a.b;
	a.*p();
};	//test test test
skill(ttt:string, tt2:int)
{
};

namespace(GamePlay);

import(Brace.Base.Io);

interace(ICurly)
{
    Exec(str : string)int;
};

class(Player)extends(Character)implements(ICurly)
{
    public{
        Entry(str : string)int
        {
            print(str);
            return(0);
        };
        Exec(str : string)int
        {
            return(atoi(str));
        };
    };
    private{
        m_Abc : int;

    };
};

externsion(ifndef)extends(Statement)
{
    
};

main()int
{
    @ct+=2;
    echo("@ct:", @ct);

    echo("inc:", ++@ct);
    echo("dec:", --@ct);
    echo("positive:", +@ct);
    echo("negative:", -@ct);
    for(int i=0;i<9;++i){
        echo(i);
    };
    return <- a*b+4;
};
